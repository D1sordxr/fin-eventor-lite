#name: CI
#
#on:
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]
#
#jobs:
#  lint:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-go@v4
#        with:
#          go-version: "1.23"
#      - name: Install golangci-lint
#        run: |
#          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
#      - name: Run linter
#        run: golangci-lint run --timeout 3m
#
#  test:
#    needs: lint
#    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:15
#        env:
#          POSTGRES_USER: testuser
#          POSTGRES_PASSWORD: testpass
#          POSTGRES_DB: testdb
#        ports:
#          - 5432:5432
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-go@v4
#        with:
#          go-version: "1.22"
#
#      - name: Install dependencies
#        run: go mod download
#
#      - name: Wait for PostgreSQL
#        run: sleep 5
#
#      - name: Run migrations
#        env:
#          DB_DSN: "postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable"
#        run: |
#          # Пример для golang-migrate:
#          migrate -path ./migrations -database "$DB_DSN" up
#
#      - name: Run tests
#        env:
#          DB_DSN: "postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable"
#        run: |
#          go test ./... -v -coverprofile=coverage.out -covermode=atomic
#          go tool cover -func=coverage.out
#
#      - name: Upload coverage
#        uses: actions/upload-artifact@v3
#        with:
#          name: coverage-report
#          path: coverage.out
